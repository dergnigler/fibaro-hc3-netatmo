{"name":"Netatmo base station","type":"com.fibaro.multilevelSensor","apiVersion":"1.0","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"250"},"title":"quickApp_device_46"},"sections":{"items":[{"components":[{"name":"lblMain","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblTemp","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblPress","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblStation","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblMessage","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_46"}}},"uiCallbacks":[{"callback":"","eventType":null,"name":"lblMain"},{"callback":"","eventType":null,"name":"lblTemp"},{"callback":"","eventType":null,"name":"lblPress"},{"callback":"","eventType":null,"name":"lblStation"},{"callback":"","eventType":null,"name":"lblMessage"}],"mainFunction":"-- Multilevel sensor type have no actions to handle\n-- To update multilevel sensor state, update property \"value\" with integer\n-- Eg. self:updateProperty(\"value\", 37.21) \n\n-- To set unit of the sensor, update property \"unit\". You can set it on QuickApp initialization\n-- Eg. \n-- function QuickApp:onInit()\n--     self:updateProperty(\"unit\", \"KB\")\n-- end\n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\nlocal clientId = \"\"\nlocal secret = \"\"\nlocal username = \"\"\nlocal password = \"\"\nlocal baseUrl =  \"https://api.netatmo.com\"\nlocal refresh_s = 5 * 60\n\nlocal BASE_MODULE=\"base\"\nlocal RAIN_MODULE=\"NAModule3\"\nlocal WIND_MODULE=\"NAModule2\"\nlocal OUTDOOR_MODULE=\"NAModule1\"\nlocal language=\"en\"\nlocal sy={snow='\\240\\159\\140\\168',fog='\\240\\159\\140\\171',sunny='\\226\\152\\128\\239\\184\\143',partlysunny='\\226\\155\\133\\239\\184\\143',\n  partlycloudy='\\226\\155\\133\\239\\184\\143',mostlysunny='\\240\\159\\140\\164',mostlycloudy='\\240\\159\\140\\165',rain='\\240\\159\\140\\167',\n  flurries='\\226\\157\\132\\239\\184\\143',cloudy='\\226\\152\\129\\239\\184\\143',tornado='\\240\\159\\140\\170',chancerain='\\240\\159\\140\\166',\n  chancesleet='\\240\\159\\140\\168',chancetstorms='\\240\\159\\140\\170',chanceflurries='\\226\\157\\132\\239\\184\\143',\n  chancesnow='\\226\\152\\131\\239\\184\\143',windy='\\240\\159\\140\\172',wind='\\240\\159\\140\\172',gail='\\240\\159\\146\\168',clear='\\226\\152\\128\\239\\184\\143',\n  sleet='\\226\\155\\136',hazy='\\240\\159\\140\\165',tstorms='\\226\\155\\136',warning='\\226\\154\\160\\239\\184\\143',ok='\\226\\156\\133',\n  temp='\\240\\159\\140\\161',humid='\\240\\159\\146\\167',noise='\\240\\159\\148\\138',co2='\\240\\159\\152\\183',arrowup='\\226\\134\\145',\n  arrowdn='\\226\\134\\147',arrow_up=\"\\226\\172\\134\\239\\184\\143\",arrow_dn=\"\\226\\172\\135\\239\\184\\143\",arrow_right=\"\\226\\158\\161\\239\\184\\143\",\n  arrow_rraise=\"\\226\\134\\151\\239\\184\\143\",arrow_rfall=\"\\226\\134\\152\\239\\184\\143\",gust='\\240\\159\\146\\168',dir='\\240\\159\\154\\169',\n  rainfall='\\226\\152\\148\\239\\184\\143',umbrella='\\226\\152\\130\\239\\184\\143',closed_umbrella='\\240\\159\\140\\130',brihi='\\240\\159\\148\\134',\n  brilo='\\240\\159\\148\\133',sun='\\226\\152\\128\\239\\184\\143',heat='\\240\\159\\140\\158',cool='\\226\\157\\132\\239\\184\\143',\n  refresh=\"\\240\\159\\148\\132\",in_envelope=\"\\240\\159\\147\\168\",battery=\"\\240\\159\\148\\139\",signal=\"\\240\\159\\147\\182\",floppy='\\240\\159\\146\\190',\n  cd=\"\\240\\159\\146\\191\",week=\"\\240\\157\\147\\166\",month=\"\\240\\159\\147\\134\",hour=\"\\240\\159\\149\\144\",trackball=\"\\240\\159\\150\\178\",\n  eye=\"\\240\\159\\145\\129\",round_pushpin=\"\\240\\159\\147\\141\",sep='\\226\\142\\170',question='\\226\\157\\147',trackball=\"\\240\\159\\150\\178\"}\n\nlocal yellow = 1180\nlocal orange = 1890\nlocal red    = 2250\n\nlocal langTable={lng=lng,nlng=language,\n    en={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Sunday\",Monday=\"Monday\",Tuesday=\"Tuesday\",Wednesday=\"Wednesday\",Thursday=\"Thursday\",Friday=\"Friday\",Saturday=\"Saturday\"},},\n    pl={co2=\"Poziom CO2\",rain_hr=\"Przez godzinę\",rain_3hr=\"Przez 3 godziny\",rain_day=\"Przez dzień\",rain_week=\"Przez tydzień\",\n      rain_month=\"Przez miesiąc\",uv=\"Indeks UV\",firmware=\"Wersja oprogram.\",trend_up=\"wzrastać\",trend_st=\"stabilny\",trend_dn=\"spadać\",\n      update_ok=\"VD uaktualnione\",update_er=\"Błąd aktualizacji\",refresh=\"Odświerz\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",\n        SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Niedziela\",Monday=\"Poniedziałek\",Tuesday=\"Wtorek\",Wednesday=\"Środa\",Thursday=\"Czwartek\",Friday=\"Piątek\",Saturday=\"Sobota\"},},\n    de={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Aktualisierung\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Sonntag\",Monday=\"Montag\",Tuesday=\"Dienstag\",Wednesday=\"Mittwoch\",Thursday=\"Donnerstag\",Friday=\"Freitag\",Saturday=\"Samstag\"},},\n    sv={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"S\\195\\182ndag\",Monday=\"M\\195\\165ndag\",Tuesday=\"Tisdag\",Wednesday=\"Onsdag\",Thursday=\"Torsdag\",Friday=\"Fredag\",Saturday=\"L\\195\\182rdag\"},},\n    pt={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Domingo\",Monday=\"Segunda-feira\",Tuesday=\"Terça-feira\",Wednesday=\"Quarta-feira\",Thursday=\"Quinta-feira\",Friday=\"Sexta-feira\",Saturday=\"Sabado\"},},\n    it={co2=\"Livello di CO2\",rain_hr=\"Ultima ora\",rain_3hr=\"Ultime 3 ore\",rain_day=\"Ultimo giorno\",rain_week=\"Setimana scorsa\",\n      rain_month=\"Scorso mese\",light=\"Luminosit\\195\\160\",uv=\"Indice UV\",firmware=\"versione firmware\",trend_up=\"up\",trend_st=\"stable\",\n      trend_dn=\"down\",update_ok=\"VD aggiornato\",update_er=\"Errore di aggiornamento\",refresh=\"Aggiornare\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",\n        ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSO\",SW=\"SO\",WSW=\"OSO\",W=\"O\",WNW=\"ONO\",NW=\"NO\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Domenica\",Monday=\"Lunedì\",Tuesday=\"Martedì\",Wednesday=\"Mercoledì\",Thursday=\"Giovedì\",Friday=\"Venerdì\",Saturday=\"Sabato\"},},\n    fr={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Dimanche\",Monday=\"Lundi\",Tuesday=\"Mardi\",Wednesday=\"Mercredi\",Thursday=\"Jeudi\",Friday=\"Vendredi\",Saturday=\"Samedi\"},},\n    nl={co2=\"CO2 niveau\",rain_hr=\"Laatste uur\",rain_3hr=\"Laatste 3 uur\",rain_day=\"Laatste dag\",rain_week=\"Laatste week\",rain_month=\"Laatste maand\",\n      uv=\"UV index\",firmware=\"Firmware versie\",trend_up=\"opstaan\",trend_st=\"stabiel\",trend_dn=\"leggen\",update_ok=\"VD bijgewerkt\",\n      update_er=\"Foute bijwerking\",refresh=\"Bijwerken\",windDir={N=\"N\",NNE=\"NNO\",NE=\"NO\",ENE=\"ONO\",E=\"O\",ESE=\"OZO\",SE=\"ZO\",SSE=\"ZZO\",S=\"Z\",\n        SSW=\"ZZW\",SW=\"ZW\",WSW=\"WZW\",W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Zondag\",Monday=\"Maandag\",Tuesday=\"Dinsdag\",Wednesday=\"Woensdag\",Thursday=\"Donderdag\",Friday=\"Vrijdag\",Saturday=\"Zaterdag\"},},\n    ro={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Duminica\",Monday=\"Luni\",Tuesday=\"Marti\",Wednesday=\"Miercuri\",Thursday=\"Joi\",Friday=\"Vineri\",Saturday=\"Sambata\"},},\n    br={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Domingo\",Monday=\"Segunda-feira\",Tuesday=\"Terça-feira\",Wednesday=\"Quarta-feira\",Thursday=\"Quinta-feira\",Friday= \"Sexta-feira\",Saturday=\"Sabado\"},},\n    et={co2=\"CO2 tase\",rain_hr=\"Viimase tunni\",rain_3hr=\"Viimase 3 tunni\",rain_day=\"Viimane p\\195\\164ev\",rain_week=\"Eelmine n\\195\\164dal\",\n      rain_month=\"Eelmine kuu\",uv=\"UV indeks\",firmware=\"P\\195\\188sivara versioon\",trend_up=\"t\\195\\181stmine\",trend_st=\"stabiilse\",\n      trend_dn=\"langeb\",update_ok=\"VD uuendatud\",update_er=\"Uuendatud vea\",refresh=\"Uuendama\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",\n        E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Pühapäev\",Monday=\"Esmaspäev\",Tuesday=\"Teisipäev\",Wednesday=\"Kolmapäev\",Thursday=\"Neljapäev\",Friday=\"Reede\",Saturday=\"Laupäev\"},},\n    lv={co2=\"CO2 līmenis\",rain_hr=\"Pēdējā stunda\",rain_3hr=\"Pēdējais 3 stunda\",rain_day=\"Pēdējā diena\",rain_week=\"Pagājušajā nedēļā\",\n      rain_month=\"Pagājušajā mēnesī\",uv=\"UV indekss\",firmware=\"programma versija\",trend_up=\"audzēšana\",trend_st=\"stabils\",trend_dn=\"krišana\",\n      update_ok=\"VD atjaunināta\",update_er=\"Update kļūda\",refresh=\"Atjaunināt\",windDir={N=\"Z\",NNE=\"ZZA\",NE=\"ZA\",ENE=\"AZA\",E=\"A\",ESE=\"ADA\",\n        SE=\"DA\",SSE=\"DDA\",S=\"D\",SSW=\"DDR\",SW=\"DR\",WSW=\"RDR\",W=\"R\",WNW=\"RZR\",NW=\"ZR\",NNW=\"ZZR\"},\n      weekdaymap={Sunday=\"Svētdiena\",Monday=\"Pirmdiena\",Tuesday=\"Otrdiena\",Wednesday=\"Trešdiena\",Thursday=\"Ceturdiena\",Friday=\"Piektdiena\",Saturday=\"Sestdiena\"},},\n    cn={co2=\"CO2水平\",rain_hr=\"上一个小时\",rain_3hr=\"最近3个小时\",rain_day=\"最后一天\",rain_week=\"上个星期\",rain_month=\"上个月\",uv=\"紫外线指数\",\n      firmware=\"固件版本\",trend_up=\"上\",trend_st=\"定\",trend_dn=\"下\",update_ok=\"VD更新\",update_er=\"更新错误\",refresh=\"更新\",windDir={N=\"北\",\n        NNE=\"北东北\",NE=\"东北\",ENE=\"东北东\",E=\"东\",ESE=\"东南东\",SE=\"东南\",SSE=\"南东南\",S=\"南\",SSW=\"南西南\",SW=\"西南\",WSW=\"西西南\",W=\"西\",WNW=\"西西北\",\n        NW=\"西北\",NNW=\"北西北\"},\n      weekdaymap={Sunday=\"星期天\",Monday=\"星期一\",Tuesday=\"星期二\",Wednesday=\"星期三\",Thursday=\"星期四\",Friday=\"星期五\",Saturday=\"星期六\"},},\n    ru={co2=\"Уровень CO2\",rain_hr=\"последний час\",rain_3hr=\"Последние 3 часа\",rain_day=\"последний день\",rain_week=\"прошлой неделе\",\n      rain_month=\"прошлый месяц\",uv=\"УФ-индекс\",firmware=\"версия прошивки\",trend_up=\"расти\",trend_st=\"стабильный\",trend_dn=\"падение\",\n      update_ok=\"Обновление VD\",update_er=\"Ошибка обновления\",refresh=\"обновление\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",\n        SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Bоскресенье\",Monday=\"Понедельник\",Tuesday=\"Bторник\",Wednesday=\"Cреда\",Thursday=\"Четверг\",Friday=\"Пятница\",Saturday=\"Cуббота\"},},\n    dk={co2=\"CO2-niveauer\",rain_hr=\"Sidste time\",rain_3hr=\"Sidste 3 timer\",rain_day=\"sidste dag\",rain_week=\"sidste uge\",\n      rain_month=\"sidste m\\195\\165ned\",uv=\"UV indeks\",firmware=\"Firmware ver.\",trend_up=\"h\\195\\166vning\",trend_st=\"stabil\",trend_dn=\"faldende\",\n      update_ok=\"VD opdateret\",update_er=\"Opdateringsfejl\",refresh=\"Opdater\",windDir={N=\"N\",NNE=\"NN\\195\\152\",NE=\"N\\195\\152\",\n        ENE=\"\\195\\152N\\195\\152\",E=\"\\195\\152\",ESE=\"\\195\\152S\\195\\152\",SE=\"S\\195\\152\",SSE=\"SS\\195\\152\",S=\"S\",SSW=\"SSV\",SW=\"SV\",WSW=\"VSV\",\n        W=\"V\",WNW=\"VNV\",NW=\"NV\",NNW=\"NNV\"},\n      weekdaymap={Sunday=\"S\\195\\184ndag\",Monday=\"Mandag\",Tuesday=\"Tirsdag\",Wednesday=\"Onsdag\",Thursday=\"Torsdag\",Friday=\"Fredag\",Saturday=\"L\\195\\184rdag\"},},\n    fi={co2=\"CO2-tasot\",rain_hr=\"Viime tunti\",rain_3hr=\"Viimeiset 3 tuntia\",rain_day=\"Viimeinen p\\195\\164iv\\195\\164\",rain_week=\"Viime viikko\",\n      rain_month=\"Viime kuukausi\",uv=\"UV-indeksi\",firmware=\"Laiteversio\",trend_up=\"nostaa\",trend_st=\"vakaa\",trend_dn=\"pudota\",\n      update_ok=\"VD p\\195\\164ivitetty\",update_er=\"P\\195\\164ivitysvirhe\",refresh=\"P\\195\\164ivitt\\195\\164\\195\\164\",windDir={N=\"P\",NNE=\"PPI\",NE=\"PI\",\n        ENE=\"IPI\",E=\"I\",ESE=\"IEI\",SE=\"EI\",SSE=\"EEI\",S=\"E\",SSW=\"EEL\",SW=\"EL\",WSW=\"LEL\",W=\"L\",WNW=\"LPL\",NW=\"PL\",NNW=\"PPL\"},\n      weekdaymap={Sunday=\"Sunnuntai\",Monday=\"Maanantai\",Tuesday=\"Tiistai\",Wednesday=\"Keskiviikko\",Thursday=\"Torstai\",Friday=\"Perjantai\",Saturday=\"Lauantai\"},},\n    cz={co2=\"\\195\\154roveň CO2\",rain_hr=\"Posledn\\195\\173 hodina\",rain_3hr=\"Posledn\\195\\173ch 3 hodin\",rain_day=\"Posledn\\195\\173 den\",\n      rain_week=\"Minulý týden\",rain_month=\"Minulý měsíc\",uv=\"UV index\",firmware=\"Verze firmwaru\",trend_up=\"nahoru\",trend_st=\"stabiln\\195\\173\",\n      trend_dn=\"dolů\",update_ok=\"VD aktualizov\\195\\161no\",update_er=\"Chyba aktualizace\",refresh=\"Obnovit\",windDir={N=\"S\",NNE=\"SSV\",NE=\"SV\",\n        ENE=\"VSV\",E=\"V\",ESE=\"VJV\",SE=\"JV\",SSE=\"JJV\",S=\"J\",SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"Neděle\",Monday=\"Pondělí\",Tuesday=\"Úterý\",Wednesday=\"Středa\",Thursday=\"Čtvrtek\",Friday=\"Pátek\",Saturday=\"Sobota\"},},\n    us={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Sunday\",Monday=\"Monday\",Tuesday=\"Tuesday\",Wednesday=\"Wednesday\",Thursday=\"Thursday\",Friday=\"Friday\",Saturday=\"Saturday\"},},\n    es={co2=\"Nivel de CO2\",rain_hr=\"Ultima hora\",rain_3hr=\"\\195\\154ltimas 3 horas\",rain_day=\"\\195\\186ltimo d\\195\\173a\",rain_week=\"Semana pasada\",\n      rain_month=\"Mes pasado\",uv=\"\\195\\141ndice UV\",firmware=\"Versi\\195\\179n de firmware\",trend_up=\"arriba\",trend_st=\"estable\",trend_dn=\"abajo\",\n      update_ok=\"VD actualizado\",update_er=\"Error de actualizaci\\195\\179n\",refresh=\"Refrescar\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",\n        ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSO\",SW=\"SO\",WSW=\"OSO\",W=\"O\",WNW=\"ONO\",NW=\"NO\",NNW=\"NNO\"},\n      weekdaymap={Sunday=\"Domingo\",Monday=\"Lunes\",Tuesday=\"Martes\",Wednesday=\"Miércoles\",Thursday=\"Jueves\",Friday=\"Viernes\",Saturday=\"Sabado\"},},\n    sk={co2=\"Hladina CO2\",rain_hr=\"Posledn\\195\\186 hod.\",rain_3hr=\"Posledn\\195\\169 3 hod.\",rain_day=\"Posledný deň\",rain_week=\"Posledný týždeň\",\n      rain_month=\"Posledný mesiac\",uv=\"UV index\",firmware=\"Verzia firmv\\195\\169ru\",trend_up=\"rast\\195\\186ce\",trend_st=\"stabilný\",\n      trend_dn=\"dolu\",update_ok=\"VD Aktualizovan\\195\\169\",update_er=\"Chyba aktualiz\\195\\161cie\",refresh=\"Aktualizovať\",windDir={N=\"S\",NNE=\"SSO\",\n        NE=\"SO\",ENE=\"OSO\",E=\"O\",ESE=\"OJO\",SE=\"JO\",SSE=\"JJO\",S=\"J\",SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"Nedeľa\",Monday=\"Pondelok\",Tuesday=\"Utorok\",Wednesday=\"Streda\",Thursday=\"Štvrtok\",Friday=\"Piatok\",Saturday=\"Sobota\"},},\n    hr={co2=\"Nivo CO2\",rain_hr=\"Zadnji sat\",rain_3hr=\"Zadnja 3 sata\",rain_day=\"Zadnjih 24 sata\",rain_week=\"Zadnji tjedan\",rain_month=\"Zadnji mjesec\",\n      uv=\"UV indeks\",firmware=\"Verzija firmvera\",trend_up=\"raste\",trend_st=\"stabilno\",trend_dn=\"pada\",update_ok=\"VD ažuriran\",\n      update_er=\"Greška kod ažuriranja\",refresh=\"Ažuriraj\",windDir={N=\"S\",NNE=\"SSI\",NE=\"SI\",ENE=\"ISI\",E=\"I\",ESE=\"IJI\",SE=\"JI\",SSE=\"JJI\",S=\"J\",\n        SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"Nedjelja\",Monday=\"Ponedjeljak\",Tuesday=\"Utorak\",Wednesday=\"Srijeda\",Thursday=\"Četvrtak\",Friday=\"Petak\",Saturday=\"Subota\"},},\n    ba={co2=\"Nivo CO2\",rain_hr=\"Zadnji sat\",rain_3hr=\"Zadnja 3 sata\",rain_day=\"Zadnjih 24 sata\",rain_week=\"Zadnji tjedan\",rain_month=\"Zadnji mjesec\",\n      uv=\"UV indeks\",firmware=\"Verzija firmvera\",trend_up=\"raste\",trend_st=\"stabilno\",trend_dn=\"pada\",update_ok=\"VD ažuriran\",\n      update_er=\"Greška kod ažuriranja\",refresh=\"Ažuriraj\",windDir={N=\"S\",NNE=\"SSI\",NE=\"SI\",ENE=\"ISI\",E=\"I\",ESE=\"IJI\",SE=\"JI\",SSE=\"JJI\",S=\"J\",\n        SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"Nedjelja\",Monday=\"Ponedjeljak\",Tuesday=\"Utorak\",Wednesday=\"Srijeda\",Thursday=\"Četvrtak\",Friday=\"Petak\",Saturday=\"Subota\"},},\n    rs={co2=\"ниво ЦО2\",rain_hr=\"задњи час\",rain_3hr=\"задња 3 часа\",rain_day=\"задња 24 часа\",rain_week=\"Zadnji tjedan\",rain_month=\"задњи месец\",\n      uv=\"УВ индекс\",firmware=\"верзија фирмвера\",trend_up=\"расте\",trend_st=\"стабилно\",trend_dn=\"пада\",update_ok=\"ВД ажуриран\",\n      update_er=\"Грешка код ажурирањa\",refresh=\"ажурирај\",windDir={N=\"S\",NNE=\"SSI\",NE=\"SI\",ENE=\"ISI\",E=\"I\",ESE=\"IJI\",SE=\"JI\",SSE=\"JJI\",S=\"J\",\n        SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"недеља\",Monday=\"понедељак\",Tuesday=\"Уторак\",Wednesday=\"среда\",Thursday=\"четвртак\",Friday=\"петак\",Saturday=\"субота\"},},\n    si={co2=\"Raven CO2\",rain_hr=\"Zadnja ura\",rain_3hr=\"Zadnja 3 ure\",rain_day=\"Zadnjih 24 ur\",rain_week=\"Zadnji tjedan\",rain_month=\"Prejšnji mesec\",\n      uv=\"UV indeks\",firmware=\"Različica firmvera\",trend_up=\"Narašča\",trend_st=\"Vztrajno\",trend_dn=\"Padec\",update_ok=\"VD posodobljen\",\n      update_er=\"Napake pri posodabljanju\",refresh=\"Posodobitev\",windDir={N=\"S\",NNE=\"SSI\",NE=\"SI\",ENE=\"ISI\",E=\"I\",ESE=\"IJI\",SE=\"JI\",SSE=\"JJI\",\n        S=\"J\",SSW=\"JJZ\",SW=\"JZ\",WSW=\"ZJZ\",W=\"Z\",WNW=\"ZSZ\",NW=\"SZ\",NNW=\"SSZ\"},\n      weekdaymap={Sunday=\"Nedelja\",Monday=\"Ponedjeljek\",Tuesday=\"Torek\",Wednesday=\"Sreda\",Thursday=\"Četrtek\",Friday=\"Petek\",Saturday=\"Sobota\"},},\n    no={co2=\"CO2-niv\\195\\165er\",rain_hr=\"Siste time\",rain_3hr=\"Siste 3 time\",rain_day=\"Siste dag\",rain_week=\"Forrige uke\",\n      rain_month=\"forrige m\\195\\165ned\",uv=\"UV indeks\",firmware=\"Fastvareversjon\",trend_up=\"opp\",trend_st=\"stabil\",trend_dn=\"ned\",\n      update_ok=\"VD oppdatert\",update_er=\"Oppdateringsfeil\",refresh=\"Forfriske\",windDir={N=\"N\",NNE=\"NN\\195\\152\",NE=\"N\\195\\152\",\n        ENE=\"\\195\\152N\\195\\152\",E=\"\\195\\152\",ESE=\"\\195\\152S\\195\\152\",SE=\"S\\195\\152\",SSE=\"SS\\195\\152\",S=\"S\",SSW=\"SSV\",SW=\"SV\",WSW=\"VSV\",\n        W=\"V\",WNW=\"VNV\",NW=\"NV\",NNW=\"NNV\"},\n      weekdaymap={Sunday=\"S\\195\\184ndag\",Monday=\"Mandag\",Tuesday=\"Tirsdag\",Wednesday=\"Onsdag\",Thursday=\"Torsdag\",Friday=\"Fredag\",Saturday=\"L\\195\\184rdag\"},},\n    hu={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Vasárnap\",Monday=\"Hétfő\",Tuesday=\"Kedd\",Wednesday=\"Szerda\",Thursday=\"Csütörtök\",Friday=\"Péntek\",Saturday=\"Szombat\"},},\n    bg={co2=\"CO2 level\",rain_hr=\"Last hour\",rain_3hr=\"Last 3 hours\",rain_day=\"Last day\",rain_week=\"Last week\",rain_month=\"Last month\",\n      uv=\"UV index\",firmware=\"Firmware ver.\",trend_up=\"up\",trend_st=\"stable\",trend_dn=\"down\",update_ok=\"VD updated\",update_er=\"Update error\",\n      refresh=\"Refresh\",windDir={N=\"N\",NNE=\"NNE\",NE=\"NE\",ENE=\"ENE\",E=\"E\",ESE=\"ESE\",SE=\"SE\",SSE=\"SSE\",S=\"S\",SSW=\"SSW\",SW=\"SW\",WSW=\"WSW\",\n        W=\"W\",WNW=\"WNW\",NW=\"NW\",NNW=\"NNW\"},\n      weekdaymap={Sunday=\"Неделя\",Monday=\"Понеделник\",Tuesday=\"Вторник\",Wednesday=\"Сряда\",Thursday=\"Четвъртък\",Friday=\"Петък\",Saturday=\"Събота\"},}}\n\n\n\nfunction createNetatmoClient(modules)\n    self = {}\n    self.baseApiUrl = baseUrl\n    self.httpClient = net.HTTPClient()\n    self.token = nil\n\n    clientId = appSelf:getVariable(\"clientId\")\n    secret = appSelf:getVariable(\"secret\")\n    username = appSelf:getVariable(\"username\")\n    password = appSelf:getVariable(\"password\")\n    baseUrl =  \"https://api.netatmo.com\"\n\n    modules = modules or {}\n\n    self.rain = modules.RAIN_MODULE or {}\n    self.base = modules.BASE_MODULE or {}\n    self.wind = modules.WIND_MODULE or {}\n    self.out = modules.OUTDOOR_MODULE or {}\n\n    function self.getModules()\n        local m = {\n            RAIN_MODULE = self.rain,\n            BASE_MODULE = self.base,\n            WIND_MODULE = self.wind,\n            OUTDOOR_MODULE = self.out\n        }\n        return m\n    end\n------------------------- Devices utils\n    function self.getDirection(sValue)\n        -- return \"-\"\n        local lW = langTable\n        local lng = lW.nlng\n        debug(\"default lang: \", lng)\n        if ((sValue >= 0) and (sValue <= 11)) then\n            return lW[lng].windDir.N\n        elseif ((sValue > 11) and (sValue <= 34)) then\n            return lW[lng].windDir.NNE\n        elseif ((sValue > 34) and (sValue <= 56)) then\n            return lW[lng].windDir.NE\n        elseif ((sValue > 56) and (sValue <= 79)) then\n            return lW[lng].windDir.ENE\n        elseif ((sValue > 79) and (sValue <= 101)) then\n            return lW[lng].windDir.E\n        elseif ((sValue > 101) and (sValue <= 124)) then\n            return lW[lng].windDir.ESE\n        elseif ((sValue > 124) and (sValue <= 146)) then\n            return lW[lng].windDir.SE\n        elseif ((sValue > 146) and (sValue <= 169)) then\n            return lW[lng].windDir.SSE\n        elseif ((sValue > 169) and (sValue <= 191)) then\n            return lW[lng].windDir.S\n        elseif ((sValue > 191) and (sValue <= 214)) then\n            return lW[lng].windDir.SSW\n        elseif ((sValue > 214) and (sValue <= 236)) then\n            return lW[lng].windDir.SW\n        elseif ((sValue > 236) and (sValue <= 259)) then\n            return lW[lng].windDir.WSW\n        elseif ((sValue > 259) and (sValue <= 281)) then\n            return lW[lng].windDir.W\n        elseif ((sValue > 281) and (sValue <= 304)) then\n            return lW[lng].windDir.WNW\n        elseif ((sValue > 304) and (sValue <= 326)) then\n            return lW[lng].windDir.NW\n        elseif ((sValue > 326) and (sValue <= 349)) then\n            return lW[lng].windDir.NNW\n        elseif ((sValue > 349) and (sValue <= 360)) then\n            return lW[lng].windDir.N\n        else\n            return \"-\"\n        end\n    end\n\n    function self.parseData(data)\n        local t = type(data)\n        if t ~= \"table\" then\n            return false, string.format(\"The data is not a table, it's a %s.\", t)\n        end\n        t = type(data.body)\n        if t ~= \"table\" then\n            return false, string.format('Table does not contain a table \"body\", it\\'s a %s.', t)\n        end\n        t = type(data.body.devices)\n        if t ~= \"table\" then\n            return false, string.format('Table does not contain a table \"body.devices\", it\\'s a %s', t)\n        end\n        return true, data.body.devices[1]\n    end\n\n    function self.startMeasure()\n        self.measureToComplete = 0\n        if self.rain.fail == 0 then \n            debug(\"start rain measure\")\n            self.getMeasure(RAIN_MODULE, self.rain._id, \"sum_rain\", \"1hour\", \"true\", os.time() - 60*60, nil, nil)\n            self.measureToComplete = self.measureToComplete + 1\n            self.getMeasure(RAIN_MODULE, self.rain._id, \"sum_rain\", \"1hour\", \"true\", os.time() - 60*60 * 24, nil, \"Day\")\n            self.measureToComplete = self.measureToComplete + 1\n            self.getMeasure(RAIN_MODULE, self.rain._id, \"sum_rain\", \"1hour\", \"true\", os.time() - 60*60 * 24 * 7, nil, \"Week\")\n            self.measureToComplete = self.measureToComplete + 1\n            self.getMeasure(RAIN_MODULE, self.rain._id, \"sum_rain\", \"1hour\", \"true\", os.time() - 60*60 * 24 * 30, nil, \"Month\")\n            self.measureToComplete = self.measureToComplete + 1\n        end\n\n        if self.wind.fail == 0 then\n            debug(\"start wind measure\")\n            self.getMeasure(WIND_MODULE, self.wind._id, \"WindStrength,WindAngle,GustStrength,GustAngle\", \"max\", nil, nil, \"last\")\n            self.measureToComplete = self.measureToComplete + 1\n        end\n\n        if self.out.fail == 0 then\n            debug(\"start out measure\")\n            self.getMeasure(OUTDOOR_MODULE, self.out._id, \"humidity,temperature\", \"max\", nil, nil, \"last\")\n            self.measureToComplete = self.measureToComplete + 1\n        end\n    end\n\n    function self.isMeasureDone()\n        return self.measureToComplete == 0\n    end\n\n    function self.measureDone()\n        self.measureToComplete = self.measureToComplete - 1\n        debug(\"measure state: \",self.measureToComplete, \"measures to go\")\n        if self.isMeasureDone() then\n            post({type=\"onMeasureDone\"})\n        end\n    end\n\n    function self.parseNAModule1(data)\n        debug(\"parse outdoor\")\n        self.out.humid_min = self.out.humid_min or 99\n        self.out.humid_max = self.out.humid_max or 0\n        self.out.humid = data.body[1].value[1][1]\n        self.out.humid_min, self.out.humid_max =\n          self.calcMinMax(\n          self.out.humid_min,\n          self.out.humid_max,\n          self.out.humid,\n          \"outdoor humidity\"\n        )\n        self.out.temp = data.body[1].value[1][2]\n        if self.base.unit == \"imperial\" then\n            self.out.temp = ((self.out.temp * 9 / 5) + 32)\n        end\n        debug(json.encode(self.out))\n    end\n\n    function self.parseNAModule2(data)\n        debug(\"parse wind\")\n        self.wind.speed = data.body[1].value[1][1]\n        _, self.wind.speed_max =\n          self.calcMinMax(0, self.wind.speed_max or 0, self.wind.speed, \"wind speed\")\n        if self.base.wind_unit == \" mph\" then\n          self.wind.speed = tonumber(string.format(\"%.0f\", (self.wind.speed * 0.621371)))\n          self.wind.speed_max = tonumber(string.format(\"%.0f\", (self.wind.speed_max * 0.621371)))\n        elseif self.base.wind_unit == \" m/s\" then\n          self.wind.speed = tonumber(string.format(\"%.1f\", (self.wind.speed * 0.277778)))\n          self.wind.speed_max = tonumber(string.format(\"%.1f\", (self.wind.speed_max * 0.277778)))\n        elseif self.base.wind_unit == \" B\" then\n          if self.wind.speed < 6 then\n            self.wind.speed = 1\n          elseif self.wind.speed < 12 then\n            self.wind.speed = 2\n          elseif self.wind.speed < 20 then\n            self.wind.speed = 3\n          elseif self.wind.speed < 29 then\n            self.wind.speed = 4\n          elseif self.wind.speed < 39 then\n            self.wind.speed = 5\n          elseif self.wind.speed < 51 then\n            self.wind.speed = 6\n          elseif self.wind.speed < 62 then\n            self.wind.speed = 7\n          elseif self.wind.speed < 75 then\n            self.wind.speed = 8\n          elseif self.wind.speed < 89 then\n            self.wind.speed = 9\n          elseif self.wind.speed < 103 then\n            self.wind.speed = 10\n          elseif self.wind.speed < 118 then\n            self.wind.speed = 11\n          else\n            self.wind.speed = 12\n          end\n          if self.wind.speed_max < 6 then\n            self.wind.speed_max = 1\n          elseif self.wind.speed_max < 12 then\n            self.wind.speed_max = 2\n          elseif self.wind.speed_max < 20 then\n            self.wind.speed_max = 3\n          elseif self.wind.speed_max < 29 then\n            self.wind.speed_max = 4\n          elseif self.wind.speed_max < 39 then\n            self.wind.speed_max = 5\n          elseif self.wind.speed_max < 51 then\n            self.wind.speed_max = 6\n          elseif self.wind.speed_max < 62 then\n            self.wind.speed_max = 7\n          elseif self.wind.speed_max < 75 then\n            self.wind.speed_max = 8\n          elseif self.wind.speed_max < 89 then\n            self.wind.speed_max = 9\n          elseif self.wind.speed_max < 103 then\n            self.wind.speed_max = 10\n          elseif self.wind.speed_max < 118 then\n            self.wind.speed_max = 11\n          else\n            self.wind.speed_max = 12\n          end\n        elseif self.base.wind_unit == \" kt.\" then\n          self.wind.speed = tonumber(string.format(\"%.0f\", (self.wind.speed * 0.539956803)))\n          self.wind.speed_max = tonumber(string.format(\"%.0f\", (self.wind.speed_max * 0.539956803)))\n        end\n        self.wind.deg = data.body[1].value[1][2]\n        self.wind.dir = self.getDirection(self.wind.deg)\n        -- get gusts\n        self.wind.gust = data.body[1].value[1][3]\n        _, self.wind.gust_max =\n          self.calcMinMax(0, self.wind.gust_max or 0, self.wind.gust, \"gust speed\")\n        if self.base.wind_unit == \" mph\" then\n          self.wind.gust = tonumber(string.format(\"%.0f\", (self.wind.gust * 0.621371)))\n          self.wind.gust_max = tonumber(string.format(\"%.0f\", (self.wind.gust_max * 0.621371)))\n        elseif self.base.wind_unit == \" m/s\" then\n          self.wind.gust = tonumber(string.format(\"%.1f\", (self.wind.gust * 0.277778)))\n          self.wind.gust_max = tonumber(string.format(\"%.1f\", (self.wind.gust_max * 0.277778)))\n        elseif self.base.wind_unit == \" B\" then\n          if self.wind.gust < 6 then\n            self.wind.gust = 1\n          elseif self.wind.gust < 12 then\n            self.wind.gust = 2\n          elseif self.wind.gust < 20 then\n            self.wind.gust = 3\n          elseif self.wind.gust < 29 then\n            self.wind.gust = 4\n          elseif self.wind.gust < 39 then\n            self.wind.gust = 5\n          elseif self.wind.gust < 51 then\n            self.wind.gust = 6\n          elseif self.wind.gust < 62 then\n            self.wind.gust = 7\n          elseif self.wind.gust < 75 then\n            self.wind.gust = 8\n          elseif self.wind.gust < 89 then\n            self.wind.gust = 9\n          elseif self.wind.gust < 103 then\n            self.wind.gust = 10\n          elseif self.wind.gust < 118 then\n            self.wind.gust = 11\n          else\n            self.wind.gust = 12\n          end\n          if self.wind.gust_max < 6 then\n            self.wind.gust_max = 1\n          elseif self.wind.gust_max < 12 then\n            self.wind.gust_max = 2\n          elseif self.wind.gust_max < 20 then\n            self.wind.gust_max = 3\n          elseif self.wind.gust_max < 29 then\n            self.wind.gust_max = 4\n          elseif self.wind.gust_max < 39 then\n            self.wind.gust_max = 5\n          elseif self.wind.gust_max < 51 then\n            self.wind.gust_max = 6\n          elseif self.wind.gust_max < 62 then\n            self.wind.gust_max = 7\n          elseif self.wind.gust_max < 75 then\n            self.wind.gust_max = 8\n          elseif self.wind.gust_max < 89 then\n            self.wind.gust_max = 9\n          elseif self.wind.gust_max < 103 then\n            self.wind.gust_max = 10\n          elseif self.wind.gust_max < 118 then\n            self.wind.gust_max = 11\n          else\n            self.wind.gust_max = 12\n          end\n        elseif self.base.wind_unit == \" kt.\" then\n          self.wind.gust = tonumber(string.format(\"%.0f\", (self.wind.gust * 0.539956803)))\n          self.wind.gust_max = tonumber(string.format(\"%.0f\", (self.wind.gust_max * 0.539956803)))\n        end\n        self.wind.gust_deg = data.body[1].value[1][4]\n        self.wind.gust_dir = self.getDirection(self.wind.gust_deg)\n        debug(string.format(\"Wind speed: %s%s - angle: %s\",self.wind.speed,self.base.wind_unit,self.wind.deg))\n        debug(string.format(\"Gust speed: %s%s - angle: %s\",self.wind.gust,self.base.wind_unit,self.wind.gust_deg))\n    end\n\n    function self.parseNAModule3(data, opt)\n        debug(\"parse rain \", opt or \"hour\")\n        local sum_rain = 0\n        for k, v in pairs(data.body) do\n          for l, w in pairs(v.value) do\n            sum_rain = sum_rain + w[1]\n          end\n        end\n        if self.base.unit == \"imperial\" then\n          sum_rain = (sum_rain * 0.039370)\n        end\n        self.rain[\"sum_\" .. (opt or \"hour\")] = sum_rain\n        debug(string.format(\"Rainfall: %s %s (%s)\", sum_rain, self.base.rain_unit, opt or \"hour\"))\n    end\n\n    function self.parseNAModule3Day(data)\n        self.parseNAModule3(data, \"day\")\n    end\n\n    function self.parseNAModule3Week(data)\n        self.parseNAModule3(data, \"week\")\n    end\n\n    function self.parseNAModule3Month(data)\n        self.parseNAModule3(data, \"month\")\n    end\n\n    function self.getModule(data, module)\n        for _, v in pairs(data.body.devices[1].modules) do\n            if v.type == module then\n               return v \n            end\n        end\n        debug(\"no module \", module, \" found.\")\n        return nil\n    end\n\n     function self.parseOutData(data)\n        local v = self.getModule(data, OUTDOOR_MODULE)\n        if v == nil or v._id == nill then\n            self.out.fail = 1\n            return self.out\n        end\n        \n        self.out.fail = 0\n        self.out.name = v.module_name\n        self.out._id = v._id\n        self.out.batt = v.battery_percent\n        self.out._rf = (100 - v.rf_status)\n        self.out.last_message = v.last_message\n        self.out.last_seen = v.last_seen\n        self.out.firmware = v.firmware\n        self.out.temp_min = v.dashboard_data.min_temp\n        self.out.temp_max = v.dashboard_data.max_temp\n        if self.base.unit == \"imperial\" then\n            self.out.temp_min = ((self.out.temp_min * 9 / 5) + 32)\n            self.out.temp_max = ((self.out.temp_max * 9 / 5) + 32)\n        end\n        self.out.temp_trend = v.dashboard_data.temp_trend\n        return self.out\n    end\n\n    function self.parseRainData(data)\n        local v = self.getModule(data, RAIN_MODULE)\n        if v == nil or v._id == nill then\n            self.rain.fail = 1\n            return self.rain\n        end\n        \n        self.rain.fail = 0\n        self.rain.name = v.module_name\n        self.rain._id = v._id\n        self.rain.batt = v.battery_percent\n        self.rain._rf = (100 - v.rf_status)\n        self.rain.last_message = v.last_message\n        self.rain.last_seen = v.last_seen\n        self.rain.firmware = v.firmware\n        return self.rain\n    end\n\n    function self.parseWindData(data)\n        local v = self.getModule(data, WIND_MODULE)\n        if v == nil or v._id == nill then\n            self.wind.fail = 1\n            return self.wind\n        end\n        self.wind.fail = 0\n        self.wind.name = v.module_name\n        self.wind._id = v._id\n        self.wind.batt = v.battery_percent\n        self.wind._rf = (100 - v.rf_status)\n        self.wind.last_message = v.last_message\n        self.wind.last_seen = v.last_seen\n        self.wind.firmware = v.firmware\n        return self.wind\n    end\n\n    function self.parseBaseData(data)\n        local ok, e = self.parseData(data)\n        if not ok then\n            post({type=\"onParseError\", error = e})\n            return\n        end\n        \n        self.base.fail = 0\n        self.base._id = data.body.devices[1]._id\n        self.base.name = data.body.devices[1].station_name\n        -- netatmo.module_name = data.body.devices[1].module_name\n        self.base.wifi = data.body.devices[1].wifi_status\n        self.base.last_status_store = data.body.devices[1].last_status_store\n        self.base.firmware = data.body.devices[1].firmware\n        if data.body.user.administrative.unit == 0 then\n            self.base.unit = \"metric\"\n            self.base.temp_unit = \" \\194\\176C\"\n            self.base.rain_unit = \" mm\"\n        else\n            self.base.unit = \"imperial\"\n            self.base.temp_unit = \" \\194\\176F\"\n            self.base.rain_unit = \" in\"\n        end\n        if data.body.user.administrative.windunit == 0 then\n            self.base.wind_unit = \" km/h\"\n        elseif data.body.user.administrative.windunit == 1 then\n            self.base.wind_unit = \" mph\"\n        elseif data.body.user.administrative.windunit == 2 then\n            self.base.wind_unit = \" m/s\"\n        elseif data.body.user.administrative.windunit == 3 then\n            self.base.wind_unit = \" B\"\n        else\n            self.base.wind_unit = \" kt.\"\n        end\n        if data.body.user.administrative.pressureunit == 0 then\n            self.base.press_unit = \" hPa\"\n        elseif data.body.user.administrative.pressureunit == 1 then\n            self.base.press_unit = \" inHg\"\n        else\n            self.base.press_unit = \" mmHg\"\n        end\n        if data.body.user.administrative.feel_like_algo == 0 then\n            self.base.feels_like = \"Humidex\"\n        else\n            self.base.feels_like = \"Heat Index\"\n        end\n        self.base.country = data.body.user.administrative.country\n        self.base.reg_locale = data.body.user.administrative.reg_locale\n        self.base.lang = data.body.user.administrative.lang\n        self.base.place={}\n        self.base.place.altitude = data.body.devices[1].place.altitude\n        self.base.place.city = data.body.devices[1].place.city\n        self.base.place.country = data.body.devices[1].place.country\n        self.base.place.time_zone = data.body.devices[1].place.timezone\n        self.base.place.lon = data.body.devices[1].place.location[1]\n        self.base.place.lat = data.body.devices[1].place.location[2]\n        self.base.temp = {}\n        self.base.temp = data.body.devices[1].dashboard_data.Temperature\n        self.base.temp_min = data.body.devices[1].dashboard_data.min_temp\n        self.base.temp_max = data.body.devices[1].dashboard_data.max_temp\n        if self.base.unit == \"imperial\" then\n            self.base.temp = ((self.base.temp * 9 / 5) + 32)\n            self.base.temp_min = ((self.base.temp_min * 9 / 5) + 32)\n            self.base.temp_max = ((self.base.temp_max * 9 / 5) + 32)\n        end\n        self.base.temp_trend = data.body.devices[1].dashboard_data.temp_trend\n        self.base.humid = data.body.devices[1].dashboard_data.Humidity\n        self.base.humid_min, self.base.humid_max =\n            self.calcMinMax(self.base.humid_min or 0, self.base.humid_max or 0, self.base.humid, \"indoor base humidity\")\n        self.base.abs_press = data.body.devices[1].dashboard_data.AbsolutePressure\n        self.base.press = tonumber(string.format(\"%.0f\", data.body.devices[1].dashboard_data.Pressure))\n        self.base.press_min, self.base.press_max =\n            self.calcMinMax(self.base.press_min or 0, self.base.press_max or 0, self.base.press, \"air pressure\")\n        self.base.press_trend = data.body.devices[1].dashboard_data.pressure_trend\n        self.base.noise = data.body.devices[1].dashboard_data.Noise\n        self.base.co2 = data.body.devices[1].dashboard_data.CO2\n        return self.base\n    end\n------------------------- tools\n    function self.calcMinMax(min, max, val, dbg)\n        local ct = os.date(\"%H:%M\", os.time())\n        dbg = dbg or \"\"\n        if ((ct >= \"00:00\") and (ct <= \"00:10\")) then\n            min = val\n            max = val\n            if addebug then\n                debug(\"Resetting min/max values for \", dbg)\n            end\n        else\n            if val < min then\n            min = val\n            end\n            if val > max then\n            max = val\n            end\n        end\n        return min, max\n    end\n------------------------- API stuff\n    function self.getUrl(url)\n        return self.baseApiUrl .. url\n    end\n\n    function self.login()\n        local dataUrl = self.getUrl(\"/oauth2/token\")\n        local requestBody =  \"grant_type=password&\" .. \"client_id=\" .. clientId .. \"&client_secret=\" .. secret .. \"&username=\" .. username .. \"&password=\" .. password .. \"&scope=read_station\"\n\n        verbose(\"url: \",dataUrl)\n        verbose(\"data: \",requestBody)\n\n        self.httpClient:request(dataUrl, {\n            options={\n                headers = {\n                    [\"Content-Type\"] = \"application/x-www-form-urlencoded;charset=UTF-8\"\n                },\n                data = requestBody,\n                method = 'POST'\n            },\n            success = function(response)\n                self.token = json.decode(response.data)\n                post({type=\"onLogin\"})\n            end,\n            error = function(error)\n                post({type=\"onLoginError\", e = error})\n            end\n        })\n    end\n\n    function self.validateLogin()\n        if self.token == nil then\n            debug(\"no token\")\n            return false\n        end\n        return true    \n    end\n\n    function self.refreshToken()\n        local dataUrl = self.getUrl(\"/oauth2/token\")\n        local requestBody =  \"grant_type=refresh_token&\" .. \"client_id=\" .. clientId .. \"&client_secret=\" .. secret .. \"&refresh_token=\" .. self.token.refresh_token\n\n        self.httpClient:request(dataUrl, {\n            options={\n                headers = {\n                    [\"Content-Type\"] = \"application/x-www-form-urlencoded;charset=UTF-8\"\n                },\n                data = requestBody,\n                method = 'POST'\n            },\n            success = function(response)\n                self.token = json.decode(response.data)\n                post({type=\"onLogin\"})\n            end,\n            error = function(error)\n                post({type=\"onLoginError\", e = error})\n            end\n        })\n    end\n\n    function self.checkResponse(res)\n        debug(json.encode(res))\n        if res.status == 200 then\n            return true, res.data\n        end\n\n        if res.status == 403 then\n            return false, res.data.error\n        end\n    end\n\n    function self.getData()\n        local dataUrl = self.getUrl(\"/api/getstationsdata?get_favorites=false\")\n        debug(\"api url: \", dataUrl)\n        if not self.validateLogin() then\n            post({type=\"login\"})\n            return\n        end\n        debug(\"token: \",json.encode(self.token))\n        self.httpClient:request(dataUrl, {\n            options={\n                headers = {\n                    Accept = \"application/json\",\n                    ContentType = \"application/json\",\n                    Authorization = \"Bearer \" .. self.token.access_token\n                },\n                method = 'GET'\n            },\n            success = function(response)\n                local ok, res = self.checkResponse(response)\n                if ok then\n                    post({type=\"onData\", d = json.decode(res)})\n                    return\n                end\n                post({type=\"onDataError\", error = res})\n            end,\n            error = function(error)\n                post({type=\"onDataError\", error = error})\n            end\n        })\n    end\n\n    function self.getMeasure(moduleType, moduleId, type, scale, real_time, date_begin, date_end, measureOpt)\n        local dataUrl = self.getUrl(\"/api/getmeasure\") .. \n                        \"?device_id=\" .. self.base._id .. \n                        \"&module_id=\" .. moduleId .. \n                        \"&scale=\" .. scale ..  \n                        \"&type=\" .. type\n                        \n        if real_time ~= nil then\n            dataUrl = dataUrl .. \"&real_time=\" .. real_time\n        end\n        if date_begin ~= nil then\n            dataUrl = dataUrl .. \"&date_begin=\" .. date_begin\n        end\n        if date_end ~= nil then\n            dataUrl = dataUrl .. \"&date_end=\" .. date_end\n        end\n        debug(\"api url: \", dataUrl)\n        if not self.validateLogin() then\n            post({type=\"login\"})\n            return\n        end\n        self.httpClient:request(dataUrl, {\n            options={\n                headers = {\n                    Accept = \"application/json\",\n                    ContentType = \"application/json\",\n                    Authorization = \"Bearer \" .. self.token.access_token\n                },\n                method = 'GET'\n            },\n            success = function(response)\n                local ok, res = self.checkResponse(response)\n                if ok then\n                    post({type=\"onMeasureData\", d = json.decode(res), moduleType=moduleType, measureOpt = measureOpt})\n                    return\n                end\n                post({type=\"onMeasureError\", error = res})\n            end,\n            error = function(error)\n                post({type=\"onMeasureError\", error = error})\n            end\n        })\n    end\n\n    return self\nend\n\n-- Posible conditions: \"unknown\", \"clear\", \"rain\", \"snow\", \"storm\", \"cloudy\", \"fog\"\nfunction QuickApp:setCondition(condition)\n    local conditionCodes = { \n        unknown = 3200,\n        clear = 32,\n        rain = 40,\n        snow = 38,\n        storm = 666,\n        cloudy = 30,\n        fog = 20,\n    }\n\n    local conditionCode = conditionCodes[condition]\n\n    if conditionCode then\n        self:updateProperty(\"ConditionCode\", conditionCode)\n        self:updateProperty(\"WeatherCondition\", condition)\n    end\nend\n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: https://manuals.fibaro.com/\nlocal trace = true\nfunction post(e,t) \n    if trace then\n        debug(\"event: \", json.encode(e))\n        debug(\"timeout: \", t or 0)\n    end\n    setTimeout(function() main(e) end,t or 0) \nend\n\nfunction main(e)\n    ({\n        start = function(e) \n            appSelf.nC.login() \n        end,\n        onLogin = function(e) \n            post({type=\"refreshData\"})\n        end,\n        onLoginError = function(e) \n            debug(\"login error\") \n            post({type=\"start\"}, 60 * 60)\n        end,\n        refreshData = function(e)\n            appSelf.nC.getData() \n        end,\n        onData = function(e) \n            -- debug(json.encode(e.d))\n            local base = appSelf.nC.parseBaseData(e.d)\n            local rain = appSelf.nC.parseRainData(e.d)\n            local out = appSelf.nC.parseOutData(e.d)\n            local wind = appSelf.nC.parseWindData(e.d)\n            debug(\"base:\", json.encode(base))\n            debug(\"rain:\", json.encode(rain))\n            debug(\"wind:\", json.encode(wind))\n            debug(\"out:\", json.encode(out))\n            appSelf:refreshView()\n            appSelf.nC.startMeasure()\n        end,\n        onDataError = function(e) \n            debug(json.encode(e)) \n            -- handle error properly\n            -- if e.error.code == 2 then\n            --     appSelf.nC.refreshToken()\n            --     return\n            -- end\n            post({type=\"start\"})   \n        end,\n        onMeasureData = function(e) -- d, moduleType\n            debug(\"mesure for: \", e.moduleType, \" with data: \", json.encode(e.d))\n            appSelf.nC[\"parse\" .. e.moduleType .. (e.measureOpt or \"\")](e.d)\n            appSelf.nC.measureDone()\n        end,\n        onMeasureError = function(e)\n            debug(json.encode(e))\n            appSelf.nC.measureDone()\n            if e.error == \"invalid_token\" then\n                appSelf.nC.refreshToken()\n            end\n        end,\n        onMeasureDone = function(e)\n            debug(\"all data downloaded... init next refresh interval\\n\")\n            appSelf:updateWeather()\n            debug(\"---------------------------------------------------\")\n            post({type=\"refreshData\"}, refresh_s * 1000)\n        end,\n        onParseError = function(e)\n            debug(e.error)\n            post({type=\"start\"}, refresh_s * 1000)\n        end\n\n    })[e.type](e)\nend\n\n-- To update temperature, update property \"Temperature\" with floating point number\n-- To update humidity, update property \"Humidity\" with floating point number\n-- To update wind speed, update property \"Wind\" with floating point number\nfunction QuickApp:updateWeather()\n    local m = self:getNetatmoClient().getModules()\n    -- debug(json.encode(m))\n    fibaro.setGlobalVariable(\"netatmoModules\", json.encode(m))\n    -- self:updateView(\"lblTest\", \"text\", \"OK\")\n    -- self:updateView(\"lblLastTime\", \"text\", \"OK\")\n    -- self:setCondition(\"clear\")\n    -- local m = self.nC.getModules()\n    -- self:updateProperty(\"Temperature\", m.OUTDOOR_MODULE.temp)\n    -- self:updateProperty(\"Humidity\", m.OUTDOOR_MODULE.humid)\n    -- self:updateProperty(\"Wind\", m.WIND_MODULE.speed)\nend\n\nfunction QuickApp:initIcons()\n    self.ic = {}\n    self.ic.main_icon       = 1019\n    self.ic.green_icon      = 1020\n    self.ic.yellow_icon     = 1021\n    self.ic.orange_icon     = 1022\n    self.ic.red_icon        = 1023\n    self.ic.error_icon      = 1024\nend\n\nfunction QuickApp:getNetatmoClient()\n    return self.nC\nend\n\nfunction QuickApp:displayNil()\n    self:updateView(\"lblMain\",\"text\",string.format(\"%s - %s - %s - %s -\",sy.temp,sy.humid,sy.co2,sy.noise))\n    self:updateView(\"lblTemp\", \"text\",string.format(\"%s %s %s - %s - %s %s - %% %s - %%\",sy.temp,sy.arrow_right,sy.arrowup,sy.arrowdn,sy.humid,sy.arrowup,sy.arrowdn))\n    self:updateView(\"lblPress\", \"text\",string.format(\"%s - %s %s - %s -\",sy.arrow_dn,sy.arrow_right,sy.arrowup,sy.arrowdn))\n    self:updateView(\"lblStation\",\"text\",string.format(\"%s %s %s - %s -\",sy.round_pushpin,sy.warning,sy.trackball, sy.cd))\n    if self.nC.base.last_status_store ~= nil then\n        self:updateView(\"lblMessage\",\"text\",string.format(\"%s %s %s\",sy.eye,sy.warning,os.date(\"%d %m %Y %H:%M\",self.nC.base.last_status_store)))\n    else self:updateView(\"lblMessage\",\"text\",string.format(\"%s %s -\",sy.eye,sy.warning))end\n    self:updateProperty(\"deviceIcon\",self.ic.error_icon)\nend\n\nfunction QuickApp:refreshView()\n    debug(\"updating view\")\n    local cTime = os.time();\n    if ((cTime - self.nC.base.last_status_store) < 1800) then\n      local temp_trend = \"\"\n      if self.nC.base.temp_trend == \"up\" then\n        temp_trend = sy.arrow_rraise\n      elseif self.nC.base.temp_trend == \"stable\" then\n        temp_trend = sy.arrow_right\n      else\n        temp_trend = sy.arrow_rfall\n      end\n      local press_trend = \"\"\n      if self.nC.base.press_trend == \"up\" then\n        press_trend = sy.arrow_rraise\n      elseif self.nC.base.press_trend == \"stable\" then\n        press_trend = sy.arrow_right\n      else\n        press_trend = sy.arrow_rfall\n      end\n      if self.nC.base.noise == nil then\n       self.nC.base.noise = \"--\"\n      end\n      if self.nC.base.co2 == nil then\n       self.nC.base.co2 = \"--\"\n      end\n      local label = string.format(\"%s %s%s %s %s %s%% %s %s ppm %s %s dB\",\n                            sy.temp,\n                          self.nC.base.temp,\n                          self.nC.base.temp_unit,\n                            temp_trend,\n                            sy.humid,\n                          self.nC.base.humid,\n                            sy.co2,\n                          self.nC.base.co2,\n                            sy.noise,\n                          self.nC.base.noise\n                          )\n      self:updateView(\"lblMain\", \"text\", label)\n      self:updateView(\"lblTemp\",\"text\",string.format(\"%s %s%s%s %s%s%s %s %s%s%% %s%s%%\",\n                            sy.temp,\n                            sy.arrowup,\n                          self.nC.base.temp_max,\n                          self.nC.base.temp_unit,\n                            sy.arrowdn,\n                          self.nC.base.temp_min,\n                          self.nC.base.temp_unit,\n                            sy.humid,\n                            sy.arrowup,\n                          self.nC.base.humid_max,\n                            sy.arrowdn,\n                          self.nC.base.humid_min\n                          )\n      )\n      self:updateView(\"lblPress\",\"text\",string.format(\"%s %s%s %s %s%s%s %s%s%s\",\n                            sy.arrow_dn,\n                          self.nC.base.press,\n                          self.nC.base.press_unit,\n                            press_trend,\n                            sy.arrowup,\n                          self.nC.base.press_max,\n                          self.nC.base.press_unit,\n                            sy.arrowdn,\n                          self.nC.base.press_min,\n                          self.nC.base.press_unit\n                          )\n      )\n      self:updateView(\"lblStation\",\"text\",string.format(\"%s %s %s %s\",\n                            sy.round_pushpin,\n                          self.nC.base.name,\n                            sy.cd,\n                          self.nC.base.firmware\n                          )\n      )\n      self:updateView(\"lblMessage\",\"text\",string.format(\"%s %s\", sy.eye, os.date(\"%d.%m.%Y %H:%M\",self.nC.base.last_status_store)))\n\n      if self.nC.base.co2 == \"--\" then\n          self:updateProperty(\"deviceIcon\", self.ic.green_icon)\n      elseif self.nC.base.co2 <= yellow then\n          self:updateProperty(\"deviceIcon\", self.ic.green_icon)\n      elseif self.nC.base.co2 > yellow and self.nC.base.co2 <= orange then\n          self:updateProperty(\"deviceIcon\", self.ic.yellow_icon)\n      elseif self.nC.base.co2 > orange and self.nC.base.co2 <= red then\n          self:updateProperty(\"deviceIcon\", self.ic.orange_icon)\n      else\n          self:updateProperty(\"deviceIcon\", self.ic.red_icon)\n      end\n      self:updateProperty(\"value\", self.nC.base.temp)\n      self:updateProperty(\"unit\", self.nC.base.temp_unit)\n    else\n        self:debug(\"ERROR - Base module not updated recently\")\n        self:debug(json.encode(self.nC.base))\n        self:displayNil()\n    end\nend\n\nfunction QuickApp:initVariables()\n    local checkVar = function(name, defaultValue, override)\n        local tmp = fibaro.getGlobalVariable(name)\n        if tmp == nil then\n            debug(\"creating global \" .. name .. \" variable\")\n            local m = {\n                name = name,\n                isEnum = false,\n                readOnly = false,\n                value = json.encode(defaultValue)\n            }\n            api.post(\"/globalVariables\", m)\n            debug(\"creating global \" .. name .. \" variable... DONE\")\n        end\n        if override then\n            fibaro.setGlobalVariable(name, json.encode(defaultValue))\n        end\n    end\n\n    checkVar(\"netatmoModules\", {})\n    checkVar(\"netatmo_sy\", sy, override)\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n\n    debug = function(text, ...) self:debug(text, ...) end\n    verbose = function(text, ...) if trace then self:debug(text, ...) end end\n    \n    self:initIcons()\n    self:initVariables()\n\n    appSelf = self\n    local modules = fibaro.getGlobalVariable(\"netatmoModules\")\n    if modules ~= nil then\n        debug(\"reading modules from last gobal state\")\n    end\n    self.nC = createNetatmoClient(modules)\n\n    self:displayNil()\n    post({type=\"start\"})     \nend\n","quickAppVariables":[{"name":"clientId","value":"XXX"},{"name":"secret","value":"XXX"},{"name":"username","value":"XXX"},{"name":"password","value":"XXX"}],"typeTemplateInitialized":true}}