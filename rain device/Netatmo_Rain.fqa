{"name":"Netatmo Rain","type":"com.fibaro.multilevelSensor","apiVersion":"1.0","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"250"},"title":"quickApp_device_43"},"sections":{"items":[{"components":[{"name":"lblMain","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblRain","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblStation","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblModule","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblSeen","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_43"}}},"uiCallbacks":[{"callback":"","eventType":null,"name":"lblMain"},{"callback":"","eventType":null,"name":"lblRain"},{"callback":"","eventType":null,"name":"lblStation"},{"callback":"","eventType":null,"name":"lblModule"},{"callback":"","eventType":null,"name":"lblSeen"}],"mainFunction":"-- Wind sensor type have no actions to handle\n-- To update wind value, update property \"value\" with floating point number\n-- Eg. self:updateProperty(\"value\", 81.42) \n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: https://manuals.fibaro.com/\nlocal batt_level = 16\nlocal refresh_rate = 60 * 1\nlocal sy={}\n\nfunction post(e,t) \n    if trace then\n        debug(\"event: \", json.encode(e))\n        debug(\"timeout: \", t or 0)\n    end\n    setTimeout(function() main(e) end,t or 0) \nend\n\nfunction main(e)\n    ({\n        start = function(e)\n            appSelf:debug(\"starting device\")\n            local m = f.getGlobalVariable(\"netatmoModules\")\n            if m == \"\" then\n                appSelf:debug(\"no data available... try after 10 min\")\n                post({type=\"start\"}, 60 * 10 * 1000)\n                return\n            end\n            post({type = \"measure\", data = m})\n        end,\n        measure = function(e)\n            if e.data == nil then\n                appSelf:debug(\"updating data from global state\")\n                e.data = f.getGlobalVariable(\"netatmoModules\")\n            end\n            local module = json.decode(e.data)\n            appSelf:updateModule(module)\n            post({type = \"measure\"}, refresh_rate * 1000)\n        end\n    })[e.type](e)\nend\n\nfunction QuickApp:initIcons()\n    self.ic = {}\n    self.ic.main_icon  = 1007\n    self.ic.rain_icon  = 1008\n    self.ic.batt_icon  = 1009\n    self.ic.error_icon = 1010\nend\n\nfunction QuickApp:updateModule(m)\n    self.module = m\n    self.rain = self.module.RAIN_MODULE\n    self.base = self.module.BASE_MODULE\n    self:debug(json.encode(self.rain))\n    self:updateProperty(\"value\", self.rain.sum_hour)\n    self:updateProperty(\"unit\", \" mm/h\")\n    self:refreshView()\n    self:debug(\"updating module state.... DONE\")\nend\n\nfunction QuickApp:displayNil()\n  self:updateView(\"lblMain\",\"text\",string.format(\"%s - %s - %s - %s -\",sy.wind,sy.dir,sy.gust,sy.dir))\n  self:updateView(\"lblRain\", \"text\",string.format(\"%s %s - %s\\194\\176/- %s %s - %s\\194\\176/-\",sy.wind,sy.arrowup,sy.dir,sy.gust,sy.arrowup,sy.dir))\n  self:updateView(\"lblStation\",\"text\",string.format(\"%s %s %s -\",sy.round_pushpin,sy.warning,sy.trackball))\n  self:updateView(\"lblModule\",\"text\",string.format(\"%s - %s - %s - %%\",sy.cd,sy.battery,sy.signal))\n  if self.rain.last_seen ~= nil then\n    self:updateView(\"lblSeen\",\"text\",string.format(\"%s %s %s\",sy.eye,sy.warning,os.date(\"%d %m %Y %H:%M\",self.rain.last_seen)))\n  else self:updateView(\"lblSeen\",\"text\",string.format(\"%s %s -\",sy.eye,sy.warning))end\n  self:updateProperty(\"deviceIcon\",self.ic.error_icon)\nend\n\nfunction QuickApp:refreshView()\n    local icon_h, icon_d, icon_w, icon_m, label = \"\"\n    local cTime = os.time();\n    if ((cTime - self.rain.last_seen) < 1800) then\n        self:debug(\"new data available\")\n        if self.rain.sum_hour > 0 then\n          icon_h = sy.rainfall\n        else\n          icon_h = sy.closed_umbrella\n        end\n        if self.rain.sum_day > 0 then\n          icon_d = sy.rainfall\n        else\n          icon_d = sy.closed_umbrella\n        end\n        if self.rain.sum_week > 0 then\n          icon_w = sy.rainfall\n        else\n          icon_w = sy.closed_umbrella\n        end\n        if self.rain.sum_month > 0 then\n          icon_m = sy.rainfall\n        else\n          icon_m = sy.closed_umbrella\n        end\n        if self.base.unit == \"metric\" then\n          label =\n            string.format(\n            \"1h%s %.1f %s 24h%s %.1f %s\",\n            icon_h,\n            self.rain.sum_hour,\n            self.base.rain_unit,\n            icon_d,\n            self.rain.sum_day,\n            self.base.rain_unit\n          )\n          self:updateView(\"lblMain\", \"text\", label)\n          self:updateView(\"lblRain\", \"text\",string.format(\"1w%s %.1f %s %s%s %.1f %s\",\n                              icon_w,\n                              self.rain.sum_week,\n                              self.base.rain_unit,\n                              sy.month,\n                              icon_m,\n                              self.rain.sum_month,\n                              self.base.rain_unit\n                            )\n          )\n        else\n          label =\n            string.format(\n            \"1h%s %.3f %s 24h%s %.3f %s\",\n            icon_h,\n            self.rain.sum_hour,\n            self.base.rain_unit,\n            icon_d,\n            self.rainsum_.day,\n            self.base.rain_unit\n          )\n          self:updateView(\"lblMain\", \"text\", label)\n          self:updateView(\"lblRain\", \"text\", string.format(\"1w%s %.3f %s %s%s %.3f %s\",\n                            icon_w,\n                            self.rain.sum_week,\n                            self.base.rain_unit,\n                            sy.month,\n                            icon_m,\n                            self.rain.sum_month,\n                            self.base.rain_unit\n                          )\n          )\n        end\n        self:debug(\"updating tech labels\")\n        self:updateView(\"lblStation\", \"text\",string.format(\"%s %s %s %s\",\n                            sy.round_pushpin,\n                            self.base.name,\n                            sy.trackball,\n                            self.rain.name\n                          )\n        )\n        self:updateView(\"lblModule\",\"text\",string.format(\"%s %s %s %s%% %s %s%%\",\n                            sy.cd,\n                            self.rain.firmware,\n                            sy.battery,\n                            self.rain.batt,\n                            sy.signal,\n                            self.rain._rf\n                          )\n        )\n        self:updateView(\"lblSeen\", \"text\", string.format(\"%s %s\", sy.eye, os.date(\"%d %m %Y %H:%M\", self.rain.last_seen)))\n        self:debug(\"updating tech labels... DONE\")\n        if self.rain.batt > batt_level then\n          if self.rain.sum_hour > 0 then\n            self:updateProperty(\"deviceIcon\", self.ic.rain_icon)\n          else\n            self:updateProperty(\"deviceIcon\", self.ic.main_icon)\n          end\n        else\n          self:updateProperty(\"deviceIcon\", self.ic.batt_icon)\n        end\n    else\n        self:debug(\"ERROR - Rain module not updated recently\")\n        self:debug(json.encode(self.rain))\n        self:displayNil()\n    end\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    self:initIcons()\n    appSelf = self\n    f = fibaro\n    self.rain = {}\n    self.base = {}\n    local s = fibaro.getGlobalVariable(\"netatmo_sy\")\n    sy = json.decode(s)\n    self:displayNil()\n    post({type = \"start\"})\nend\n","quickAppVariables":[],"typeTemplateInitialized":true}}