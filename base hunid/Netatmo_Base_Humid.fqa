{"name":"Netatmo Base Humid","type":"com.fibaro.humiditySensor","apiVersion":"1.0","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_27"},"sections":{"items":[]}},"head":{"title":"quickApp_device_27"}}},"uiCallbacks":[],"mainFunction":"-- Humidity sensor type have no actions to handle\n-- To update humidity, update property \"value\" with floating point number\n-- Eg. self:updateProperty(\"value\", 90.28) \n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: https://manuals.fibaro.com/\n\nlocal refresh_rate=60*10\n\nlocal trace = false\nfunction post(e,t) \n    if trace then\n        debug(\"event: \", json.encode(e))\n        debug(\"timeout: \", t or 0)\n    end\n    setTimeout(function() main(e) end,t or 0) \nend\n\nfunction main(e)\n    ({\n        start = function(e) \n             appSelf:debug(\"starting device\")\n            local m = fibaro.getGlobalVariable(\"netatmoModules\")\n            if m == \"\" then\n                appSelf:debug(\"no data available... try after 10 min\")\n                post({type=\"start\"}, 60 * 10 * 1000)\n                return\n            end\n            post({type = \"measure\", data = m})\n        end,\n        measure = function(e)\n            if e.data == nil then\n                appSelf:debug(\"updating data from global state\")\n                e.data = fibaro.getGlobalVariable(\"netatmoModules\")\n            end\n            local module = json.decode(e.data)\n            appSelf:updateModule(module)\n            post({type = \"measure\"}, refresh_rate * 1000)\n        end\n       \n    })[e.type](e)\nend\n\nfunction QuickApp:updateModule(m)\n    self.module = m\n    -- self:debug(json.encode(m))\n    self:updateProperty(\"value\", m.BASE_MODULE.humid)\n    self:debug(\"updating module state.... DONE\")\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    appSelf = self\n    debug = function(text, ...) self:debug(text, ...) end\n    post({type=\"start\"})     \nend\n","quickAppVariables":[],"typeTemplateInitialized":true}}