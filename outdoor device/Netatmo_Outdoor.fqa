{"name":"Netatmo Outdoor","type":"com.fibaro.multilevelSensor","apiVersion":"1.0","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"250"},"title":"quickApp_device_45"},"sections":{"items":[{"components":[{"name":"lblMain","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblTemp","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblStation","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblModule","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"lblSeen","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_45"}}},"uiCallbacks":[{"callback":"","eventType":null,"name":"lblMain"},{"callback":"","eventType":null,"name":"lblTemp"},{"callback":"","eventType":null,"name":"lblStation"},{"callback":"","eventType":null,"name":"lblModule"},{"callback":"","eventType":null,"name":"lblSeen"}],"mainFunction":"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: https://manuals.fibaro.com/\nlocal batt_level = 16\nlocal refresh_rate = 60 * 1\nlocal sy={}\n\nfunction post(e,t) \n    if trace then\n        debug(\"event: \", json.encode(e))\n        debug(\"timeout: \", t or 0)\n    end\n    setTimeout(function() main(e) end,t or 0) \nend\n\nfunction main(e)\n    ({\n        start = function(e)\n            appSelf:debug(\"starting device\")\n            local m = f.getGlobalVariable(\"netatmoModules\")\n            if m == \"\" then\n                appSelf:debug(\"no data available... try after 10 min\")\n                post({type=\"start\"}, 60 * 10 * 1000)\n                return\n            end\n            post({type = \"measure\", data = m})\n        end,\n        measure = function(e)\n            if e.data == nil then\n                appSelf:debug(\"updating data from global state\")\n                e.data = f.getGlobalVariable(\"netatmoModules\")\n            end\n            local module = json.decode(e.data)\n            appSelf:updateModule(module)\n            post({type = \"measure\"}, refresh_rate * 1000)\n        end\n    })[e.type](e)\nend\n\nfunction QuickApp:initIcons()\n    self.ic = {}\n    self.ic.main_icon       = 1011\n    self.ic.blue_icon       = 1013\n    self.ic.light_blue_icon = 1014\n    self.ic.green_icon      = 1012\n    self.ic.yellow_icon     = 1015\n    self.ic.red_icon        = 1016\n    self.ic.batt_icon       = 1017\n    self.ic.error_icon      = 1018\nend\n\nfunction QuickApp:updateModule(m)\n    self.module = m\n    self:debug(json.encode(m))\n    self.outm = self.module.OUTDOOR_MODULE\n    self.base = self.module.BASE_MODULE\n    self:debug(json.encode(self.outm))\n    self:updateProperty(\"value\", self.outm.temp)\n    self:updateProperty(\"unit\", self.base.temp_unit)\n    self:refreshView()\n    self:debug(\"updating module state.... DONE\")\nend\n\nfunction QuickApp:displayNil()\n  self:updateView(\"lblMain\",\"text\",string.format(\"%s - %s - %s - %s -\",sy.wind,sy.dir,sy.gust,sy.dir))\n  self:updateView(\"lblTemp\", \"text\",string.format(\"%s %s - %s\\194\\176/- %s %s - %s\\194\\176/-\",sy.wind,sy.arrowup,sy.dir,sy.gust,sy.arrowup,sy.dir))\n  self:updateView(\"lblStation\",\"text\",string.format(\"%s %s %s -\",sy.round_pushpin,sy.warning,sy.trackball))\n  self:updateView(\"lblModule\",\"text\",string.format(\"%s - %s - %s - %%\",sy.cd,sy.battery,sy.signal))\n  if self.outm.last_seen ~= nil then\n    self:updateView(\"lblSeen\",\"text\",string.format(\"%s %s %s\",sy.eye,sy.warning,os.date(\"%d %m %Y %H:%M\",self.outm.last_seen)))\n  else self:updateView(\"lblSeen\",\"text\",string.format(\"%s %s -\",sy.eye,sy.warning))end\n  self:updateProperty(\"deviceIcon\",self.ic.error_icon)\nend\n\nfunction QuickApp:refreshView()\n    local icon_h, icon_d, icon_w, icon_m, label = \"\"\n    local cTime = os.time();\n    if ((cTime - self.outm.last_seen) < 1800) then\n        self:debug(\"new data available\")\n        if self.outm.temp_trend == nil then\n          self.outm.temp_trend = \"N/A\"\n        end\n        local temp_trend = \"\"\n        if self.outm.temp_trend == \"up\" then\n          temp_trend = sy.arrow_rraise\n        elseif self.outm.temp_trend == \"stable\" then\n          temp_trend = sy.arrow_right\n        else\n          temp_trend = sy.arrow_rfall\n        end\n        local press_trend = \"\"\n        if self.base.press_trend == \"up\" then\n          press_trend = sy.arrow_rraise\n        elseif self.base.press_trend == \"stable\" then\n          press_trend = sy.arrow_right\n        else\n          press_trend = sy.arrow_rfall\n        end\n        self:debug(\"setting labels...\")\n        local label =\n          string.format(\n          \"%s %s%s %s %s %s%% %s %s%s %s\",\n          sy.temp,\n          self.outm.temp,\n          self.base.temp_unit,\n          temp_trend,\n          sy.humid,\n          self.outm.humid,\n          sy.arrow_dn,\n          self.base.press,\n          self.base.press_unit,\n          press_trend\n        )\n        self:updateView(\"lblMain\", \"text\", label)\n        self:updateView(\"lblTemp\", \"text\", string.format(\"%s %s %s%s %s %s%s %s %s %s%% %s %s%%\",\n                          sy.temp,\n                          sy.arrowup,\n                          self.outm.temp_max,\n                          self.base.temp_unit,\n                          sy.arrowdn,\n                          self.outm.temp_min,\n                          self.base.temp_unit,\n                          sy.humid,\n                          sy.arrowup,\n                          self.outm.humid_max,\n                          sy.arrowdn,\n                          self.outm.humid_min\n                        )   \n        )\n        self:updateView(\"lblPress\", \"text\", string.format(\"%s %s%s%s %s%s%s\",\n                        sy.arrow_dn,\n                        sy.arrowup,\n                        self.base.press_max,\n                        self.base.press_unit,\n                        sy.arrowdn,\n                        self.base.press_min,\n                        self.base.press_unit\n                      )\n        )\n        self:updateView(\"lblStation\", \"text\",string.format(\"%s %s %s %s\",\n                      sy.round_pushpin,\n                      self.base.name,\n                      sy.trackball,\n                      self.outm.name\n                    )\n        )\n        self:updateView(\"lblModule\", \"text\",string.format(\"%s %s %s %s%% %s %s%%\",\n                      sy.cd,\n                      self.outm.firmware,\n                      sy.battery,\n                      self.outm.batt,\n                      sy.signal,\n                      self.outm._rf\n                    )\n        )\n        self:updateView(\"lblSeen\", \"text\", string.format(\"%s %s\", sy.eye, os.date(\"%d.%m.%Y %H:%M\", self.outm.last_seen))\n        )\n        self:debug(\"setting labels... DONE\")\n        if self.outm.batt > batt_level then\n          if self.outm.temp <= 3 then\n            self:updateProperty(\"deviceIcon\", self.ic.blue_icon) --blue\n          elseif self.outm.temp > 3 and self.outm.temp < 14 then\n            self:updateProperty(\"deviceIcon\", self.ic.light_blue_icon) -- light blue\n          elseif self.outm.temp >= 14 and self.outm.temp <= 26 then\n            self:updateProperty(\"deviceIcon\", self.ic.green_icon) -- green\n          elseif self.outm.temp > 26 and self.outm.temp < 33 then\n            self:updateProperty(\"deviceIcon\", self.ic.yellow_icon) -- yellow\n          else\n            self:updateProperty(\"deviceIcon\", self.ic.red_icon)\n          end\n        else\n          self:updateProperty(\"deviceIcon\", self.ic.batt_icon)\n        end\n    else\n        self:debug(\"ERROR - Wind module not updated recently\")\n        self:debug(json.encode(self.outm))\n        self:displayNil()\n    end\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    self:initIcons()\n    appSelf = self\n    f = fibaro\n    self.outm = {}\n    self.base = {}\n    self:displayNil()\n    local s = fibaro.getGlobalVariable(\"netatmo_sy\")\n    sy = json.decode(s)\n    post({type = \"start\"})\nend\n","quickAppVariables":[],"typeTemplateInitialized":true}}